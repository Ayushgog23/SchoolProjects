"""
-------------------------------------------------------
Lab/Assignment  Testing
-------------------------------------------------------
Author:  Ayush Gogne
ID:      169026973
Email:   gogn6973@mylaurier.ca
Version: 2022-09-22
-------------------------------------------------------
"""
-------------------------------------------------------
t01
-------------------------------------------------------
def get_by_year(movies, year):
    """
    -------------------------------------------------------
    Creates a list of Movies from a particular year.
    The original list of movies must be unchanged.
    Use: ymovies = get_by_year(movies, year)
    -------------------------------------------------------
    Parameters:
        movies - a list of Movie objects (list of Movie)
        year - the Movie year to select (int)
    Returns:
        ymovies - Movie objects whose year attribute is
            year (list of Movie)
    -------------------------------------------------------
    """
    ymovies = []
    for i in range(len(movies)):
        if movies[i].year == year:
            ymovies.append(movies[i])
        
    return ymovies
    
task file:
from Movie_utilities import get_by_year
from Movie import Movie

movies = []
movies.append(Movie("Spider man",2004,"idk",3.5,[0,2]))
movies.append(Movie("Sonic",2015,"Man",4.5,[0,3]))
movies.append(Movie("Superman",2015,"what",2.5,[1,3]))
year = int(input("Enter a year: "))
ymovies = get_by_year(movies, year)
print(ymovies)

#output
Enter a year: 2004
Title:    Spider man
Year:     2004
Director: idk
Rating:   3.5
Genres:   science fiction,drama
['Title:    Spider man\nYear:     2004\nDirector: idk\nRating:   3.5\nGenres:   science fiction,drama']
-------------------------------------------------------
t02
-------------------------------------------------------
def get_by_rating(movies, rating):
    """
    -------------------------------------------------------
    Creates a list of Movies whose ratings are equal to or higher
    than rating.
    The original list of movies must be unchanged.
    Use: rmovies = get_by_rating(movies, rating)
    -------------------------------------------------------
    Parameters:
        movies - a list of Movie objects (list of Movie)
        rating - the minimum Movie rating to select (float)
    Returns:
        rmovies - Movie objects whose rating attribute is
            greater than or equal to rating (list of Movie)
    -------------------------------------------------------
    """
    rmovies = []
    for i in range(len(movies)):
        if movies[i].rating >= rating:
            rmovies.append(movies[i])

    return rmovies


#task file
from Movie_utilities import get_by_rating
from Movie import Movie

movies = []
movies.append(Movie("Spider man",2004,"idk",3.5,[0,2]))
movies.append(Movie("Sonic",2015,"Man",4.5,[0,3]))
movies.append(Movie("Superman",2015,"what",2.5,[1,3]))
rating = float(input("Enter the movie rating: "))
rmovies = get_by_rating(movies, rating)
print(rmovies)

#output
Enter the movie rating: 3.5
['Title:    Spider man\nYear:     2004\nDirector: idk\nRating:   3.5\nGenres:   science fiction,drama', 'Title:    Sonic\nYear:     2015\nDirector: Man\nRating:   4.5\nGenres:   science fiction,romance']



-------------------------------------------------------
t03
-------------------------------------------------------
def get_by_genre(movies, genre):
    """
    -------------------------------------------------------
    Creates a list of Movies whose list of genres include genre.
    The original list of movies must be unchanged.
    Use: gmovies = get_by_genre(movies, genre)
    -------------------------------------------------------
    Parameters:
        movies - a list of Movie objects (list of Movie)
        genre - the genre code to look for (int)
    Returns:
        gmovies - Movie objects whose genre list includes
            genre (list of Movie)
    -------------------------------------------------------
    """
    gmovies = []
    for i in range(len(movies)):
        for j in range(len(movies[i].genres)):
            if movies[i].genres[j] == genre:
                gmovies.append(movies[i])

    return gmovies
    
    
#task file
from Movie_utilities import get_by_genre
from Movie import Movie

movies = []
movies.append(Movie("Spider man",2004,"idk",3.5,[0,2]))
movies.append(Movie("Sonic",2015,"Man",4.5,[0,3]))
movies.append(Movie("Superman",2015,"what",2.5,[1,3]))
genre = int(input("Enter the genre code to look for: "))
gmovies = get_by_genre(movies, genre)
print(gmovies)


#output
Enter the genre code to look for: 0
['Title:    Spider man\nYear:     2004\nDirector: idk\nRating:   3.5\nGenres:   science fiction,drama', 'Title:    Sonic\nYear:     2015\nDirector: Man\nRating:   4.5\nGenres:   science fiction,romance']
-------------------------------------------------------
t04
-------------------------------------------------------
def get_by_genres(movies, genres):
    """
    -------------------------------------------------------
    Creates a list of Movies whose list of genres include all the genre
    codes in genres.
    The original list of movies must be unchanged.
    Use: m = get_by_genres(movies, genres)
    -------------------------------------------------------
    Parameters:
        movies - a list of Movie objects (list of Movie)
        genres - the genre codes to look for (list of int)
    Returns:
        gmovies - Movie objects whose genre list includes
            all the genres in genres (list of Movie)
    -------------------------------------------------------
    """
    
    
    gmovies = []
    for i in range(len(movies)):
        notequalto = []
        equalto = [] 
        for j in movies[i].genres:
            for k in genres:
                if j != k:
                    notequalto.append(j)
                elif j == k:
                    equalto.append(j)
        if equalto == genres and len(notequalto) == 0:
            gmovies.append(movies[i])           
            
    return gmovies
    
    
#task file
from Movie_utilities import get_by_genres
from Movie import Movie

movies = []
movies.append(Movie("Spider man",2004,"idk",3.5,[0,1,3]))
movies.append(Movie("Sonic",2015,"Man",4.5,[0,1,3]))
movies.append(Movie("Superman",2015,"what",2.5,[1,3]))
genre = int(input("Enter the genre codes to look for: "))
genres = []
while genre != 11:
    genres.append(genre)
    genre = int(input("Enter the genre codes to look for: "))

gmovies = get_by_genres(movies, genres)
print(gmovies)

#output
Enter the genre codes to look for: 1
Enter the genre codes to look for: 3
Enter the genre codes to look for: 11
[]


-------------------------------------------------------
t05
-------------------------------------------------------
def genre_counts(movies):
    """
    -------------------------------------------------------
    Counts the number of movies in each genre given in Movie.GENRES.
    The original list of movies must be unchanged.
    Use: counts = genre_counts(movies)
    -------------------------------------------------------
    Parameters:
        movies - a list of Movie objects (list of Movie)
    Returns:
        counts - the number of Movies in each genre in Movie.GENRES.
            The index of each number in counts is the index of
            the matching genre in Movie.GENRES. (list of int)
    -------------------------------------------------------
    """
    #GENRES = ("science fiction", "fantasy", "drama",
        #      "romance", "comedy", "zombie", "action",
        #     "historical", "horror", "war", "mystery")
        
    sciencefiction = 0
    fantasy = 0
    romance = 0
    comedy = 0
    zombie = 0
    action = 0
    historical = 0
    horror = 0
    war = 0
    mystery = 0
    
    for i in range(len(movies)):
        for j in movies[i].genres:
            if j == 0:
                sciencefiction += 1
            elif j == 1:
                fantasy += 1
            elif j == 2:
                romance += 1
            elif j == 3:
                comedy += 1
            elif j == 4:
                zombie += 1
            elif j == 5:
                action += 1
            elif j == 6:
                historical += 1
            elif j == 7:
                horror += 1
            elif j == 8:
                war += 1
            elif j == 9:
                mystery += 1
        
    counts = [int(f"{sciencefiction}"),int(f"{fantasy}"),int(f"{romance}"),int(f"{comedy}"),int(f"{zombie}"),int(f"{action}"),int(f"{historical}"),int(f"{horror}"),int(f"{war}"),int(f"{mystery}")]
    return counts

# Imports
from Movie_utilities import genre_counts
from Movie import Movie

movies = []
movies.append(Movie("Spider man",2004,"idk",3.5,[4,5]))
movies.append(Movie("Sonic",2015,"Man",4.5,[4,5]))
movies.append(Movie("Superman",2015,"what",2.5,[4,5]))
counts = genre_counts(movies)
print(counts)

#output
[0, 0, 0, 0, 3, 3, 0, 0, 0, 0]


#task file
from Movie_utilities import genre_counts
from Movie import Movie

movies = []
movies.append(Movie("Spider man",2004,"idk",3.5,[0,2]))
movies.append(Movie("Sonic",2015,"Man",4.5,[0,1]))
movies.append(Movie("Superman",2015,"what",2.5,[0,1]))
counts = genre_counts(movies)
print(counts)

#output
[3, 2, 1, 0, 0, 0, 0, 0, 0, 0]